{"version":3,"file":"static/js/482.b0e23dc8.chunk.js","mappings":"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","sources":["components/HeaderComponent/index.jsx","components/JobsList/JobsList.jsx","components/SideNavbar/index.jsx","constants.js","components/PostJobForm/index.js","utils/index.js","components/JobApplicantsList/index.jsx","components/ViewJobApplicantsModal/index.jsx","pages/EmployerPage/index.jsx"],"sourcesContent":["import { Layout, theme, Row, Col, Typography, Button } from \"antd\";\nconst { Header } = Layout;\nconst { Text } = Typography;\n\nconst HeaderComponent = ({ title, onButtonClick }) => {\n  const {\n    token: { colorBgContainer },\n  } = theme.useToken();\n\n  return (\n    <Header\n      style={{\n        padding: 0,\n        background: colorBgContainer,\n      }}\n    >\n      <Row align=\"center\">\n        <Col span={10}>\n          <Text strong style={{ fontSize: \"20px\", marginLeft: \"20px\" }}>\n            {title}\n          </Text>\n        </Col>\n        <Col offset={10} span={4}>\n          <Button type=\"primary\" onClick={onButtonClick}>\n            Log Out\n          </Button>\n        </Col>\n      </Row>\n    </Header>\n  );\n};\n\nexport default HeaderComponent;\n","import { Button, Card, List } from \"antd\";\nimport { USER_TYPES } from \"constants\";\n\nconst JobsList = ({ data, userType, onButtonClick }) => {\n  return (\n    <Card title={\"Jobs List\"}>\n      {\" \"}\n      <List\n        pagination={{ position: \"bottom\", align: \"center\", pageSize: 5 }}\n        dataSource={data}\n        rowKey={(item) => item.id}\n        renderItem={(item) => (\n          <List.Item\n            actions={\n              USER_TYPES[\"freelancer\"] === userType\n                ? [\n                    <Button\n                      type=\"primary\"\n                      onClick={() => onButtonClick(item.id)}\n                    >\n                      Easy Apply\n                    </Button>,\n                  ]\n                : [\n                    <Button\n                      type=\"default\"\n                      onClick={() => onButtonClick(item.id)}\n                    >\n                      View Applicants ({item.id})\n                    </Button>,\n                  ]\n            }\n          >\n            <List.Item.Meta\n              title={item.role}\n              description={<JobsDescription item={item} />}\n            />\n          </List.Item>\n        )}\n      />\n    </Card>\n  );\n};\n\nconst JobsDescription = ({ item }) => {\n  const { companyName, skillset, minSalaryPerHour } = item;\n  return (\n    <p>\n      {companyName} | Skills: {`${skillset}`} | Salary Per Hour: $\n      {minSalaryPerHour}{\" \"}\n    </p>\n  );\n};\n\nexport default JobsList;\n","import { Flex, Menu, Typography } from \"antd\";\nimport { UserOutlined, BarChartOutlined } from \"@ant-design/icons\";\nimport { USER_TYPES } from \"constants\";\n\nconst { Text } = Typography;\n\nconst freelancerMenuItems = [\n  {\n    key: \"view-profile\",\n    icon: <UserOutlined />,\n    label: \"View Profile\",\n  },\n  {\n    key: \"view-jobs\",\n    icon: <BarChartOutlined />,\n    label: \"Jobs\",\n  },\n  {\n    key: \"profile-settings\",\n    icon: <UserOutlined />,\n    label: \"Profile Settings\",\n  },\n];\n\nconst employerMenuItems = [\n  {\n    key: \"jobs\",\n    icon: <BarChartOutlined />,\n    label: \"Jobs\",\n  },\n  {\n    key: \"post-job\",\n    icon: <UserOutlined />,\n    label: \"Post a Job\",\n  },\n\n  // {\n  //   key: \"profile-settings\",\n  //   icon: <UserOutlined />,\n  //   label: \"Profile Settings\",\n  // },\n];\n\nconst menuItems = {\n  [USER_TYPES.freelancer]: freelancerMenuItems,\n  [USER_TYPES.employer]: employerMenuItems,\n};\n\nconst SideNavbar = ({ onClick, currentNavKey, userType }) => {\n  return (\n    <>\n      <Flex align=\"center\" justify=\"flex-start\">\n        <Text\n          level={4}\n          style={{\n            color: \"white\",\n            margin: \"15px 25px\",\n            fontSize: \"25px\",\n            fontWeight: 700,\n          }}\n        >\n          Job Portal{\" \"}\n        </Text>\n      </Flex>\n\n      <Menu\n        theme=\"dark\"\n        mode=\"inline\"\n        defaultSelectedKeys={[currentNavKey]}\n        items={menuItems[userType]}\n        onClick={onClick}\n        style={{\n          marginTop: \"30px\",\n        }}\n      />\n    </>\n  );\n};\n\nexport default SideNavbar;\n","const USER_TYPES = {\n  freelancer: \"Freelancer\",\n  employer: \"Employer\",\n};\n\nconst SKILLSET = [\n  { value: \"ai\", label: \"AI\" },\n  { value: \"react\", label: \"ReactJs\" },\n  { value: \"java\", label: \"Java\" },\n  { value: \"node\", label: \"NodeJs\" },\n  { value: \"aws\", label: \"AWS\" },\n  { value: \"sql\", label: \"SQL\" },\n  { value: \"python\", label: \"Python\" },\n];\n\nconst LOCATIONS = [\n  { value: \"bengaluru\", label: \"AI\" },\n  { value: \"react\", label: \"ReactJs\" },\n];\n\n\nconst JOBS_DATA = [\n  {\n    id: 1,\n    role: \"Software Engineer\",\n    companyName: \"Intuit\",\n    skillset: [\"javascript\", \"react\"],\n    minSalaryPerHour: 40,\n  },\n  {\n    id: 2,\n    role: \"Product Manager\",\n    companyName: \"Facebook\",\n    skillset: [\"javascript\", \"react\"],\n    minSalaryPerHour: 50,\n  },\n  {\n    id: 3,\n    role: \"Tester\",\n    companyName: \"Amazon\",\n    skillset: [\"javascript\", \"react\"],\n    minSalaryPerHour: 60,\n  },\n  {\n    id: 4,\n    role: \"Analyst\",\n    companyName: \"Netflix\",\n    skillset: [\"javascript\", \"react\"],\n    minSalaryPerHour: 70,\n  },\n];\n\nexport { USER_TYPES, SKILLSET, JOBS_DATA };\n","import {\n  Button,\n  Card,\n  Form,\n  Input,\n  InputNumber,\n  message,\n  Select,\n  Upload,\n} from \"antd\";\nimport { UploadOutlined } from \"@ant-design/icons\";\nimport { SKILLSET } from \"constants\";\nimport { useDispatch } from \"react-redux\";\nimport { addNewJob } from \"state/slices/employerSlice\";\nimport { FILE_SIZE_LIMIT } from \"utils\";\n\nconst { TextArea } = Input;\n\nconst mockUpload = ({ file, onSuccess, onError }) => {\n  setTimeout(() => {\n    const meetsFileSize = file.size / 1024 < FILE_SIZE_LIMIT;\n    if (meetsFileSize) {\n      onSuccess(\"ok\");\n    } else {\n      onError(new Error(\"File must be smaller than 16KB!\"));\n    }\n  }, 1000);\n};\n\nconst fileUploadProps = {\n  name: \"file\",\n  accept: \".doc,.docx,.pdf\",\n  headers: {\n    authorization: \"authorization-text\",\n  },\n  beforeUpload: (file) => {\n    const meetsFileSize = file.size / 1024 < FILE_SIZE_LIMIT;\n    if (!meetsFileSize) {\n      message.error(\"File must be smaller than 16KB\");\n    }\n    return meetsFileSize || Upload.LIST_IGNORE;\n  },\n  customRequest: mockUpload,\n  maxCount: \"1\",\n  onChange(info) {\n    if (info.file.status !== \"uploading\") {\n      //console.log(info.file, info.fileList);\n    }\n    if (info.file.status === \"done\") {\n      message.success(`${info.file.name} file uploaded successfully`);\n    } else if (info.file.status === \"error\") {\n      message.error(`${info.file.name} file upload failed.`);\n    }\n  },\n};\n\nconst normFile = (e) => {\n  if (Array.isArray(e)) {\n    return e;\n  }\n  //console.log(\"normFile\", e.file.status);\n  return e?.fileList;\n};\n\nconst PostJobForm = () => {\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n\n  const onFinish = (values) => {\n    const jobDetails = {\n      id: Math.floor(Math.random() * 100),\n      role: values.jobTitle,\n      companyName: values.companyName,\n      skillset: values.jobTags,\n      minSalaryPerHour: values.salaryPerHour,\n      timeStamp: Date.now(),\n    };\n    setTimeout(() => {\n      form.resetFields();\n      dispatch(addNewJob(jobDetails));\n      message.success(\"Job Posted Successfully\");\n    }, 300);\n  };\n  const onFinishFailed = (errorInfo) => {\n    console.log(\"Failed:\", errorInfo);\n  };\n\n  const handleChange = () => {\n    return \"\";\n  };\n\n  return (\n    <Card title=\"Post a Job\">\n      <Form\n        name=\"post-job-form\"\n        form={form}\n        labelCol={{\n          span: 8,\n        }}\n        wrapperCol={{\n          span: 8,\n        }}\n        labelAlign=\"left\"\n        style={{\n          marginTop: \"20px\",\n        }}\n        onFinish={onFinish}\n        onFinishFailed={onFinishFailed}\n      >\n        <Form.Item\n          label=\"Job Title\"\n          name=\"jobTitle\"\n          rules={[\n            {\n              required: true,\n              message: \"Please input value\",\n            },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item\n          label=\"Job Requirements\"\n          name=\"jobRequirements\"\n          rules={[\n            {\n              required: true,\n              message: \"Please input value\",\n            },\n          ]}\n        >\n          <TextArea />\n        </Form.Item>\n        <Form.Item\n          label=\"Company Name\"\n          name=\"companyName\"\n          rules={[\n            {\n              required: true,\n              message: \"Please input value\",\n            },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item\n          label=\"Salary Per Hour($)\"\n          name=\"salaryPerHour\"\n          rules={[\n            {\n              required: true,\n              message: \"Please input value\",\n            },\n          ]}\n        >\n          <InputNumber />\n        </Form.Item>\n        <Form.Item\n          name=\"jobDocument\"\n          label=\"Job Description Doc\"\n          valuePropName=\"fileList\"\n          getValueFromEvent={normFile}\n        >\n          <Upload {...fileUploadProps}>\n            <Button icon={<UploadOutlined />}>Click to Upload</Button>\n          </Upload>{\" \"}\n        </Form.Item>\n        <Form.Item\n          name=\"jobTags\"\n          label=\"Tags\"\n          rules={[\n            {\n              required: true,\n              message: \"Please input value\",\n            },\n          ]}\n        >\n          <Select\n            mode=\"tags\"\n            style={{\n              width: \"100%\",\n            }}\n            placeholder=\"Select Tags / Add tags\"\n            onChange={handleChange}\n            options={SKILLSET}\n          />\n        </Form.Item>\n        <Form.Item\n          label=\"Contact Name\"\n          name=\"contactName\"\n          rules={[\n            {\n              required: true,\n              message: \"Please input value\",\n            },\n          ]}\n        >\n          <Input name=\"contactName\" placeholder=\"John Doe\" />\n        </Form.Item>\n        <Form.Item\n          label=\"Contact Number\"\n          name=\"contactNumber\"\n          rules={[\n            {\n              required: true,\n              message: \"Please input value\",\n            },\n          ]}\n        >\n          <Input placeholder=\"95233xxxxx\" />\n        </Form.Item>\n        <Form.Item\n          wrapperCol={{\n            offset: 8,\n            span: 16,\n          }}\n        >\n          <Button type=\"primary\" htmlType=\"submit\">\n            Submit\n          </Button>\n        </Form.Item>\n      </Form>\n    </Card>\n  );\n};\n\nexport default PostJobForm;\n","export const FILE_SIZE_LIMIT = 16; // 16kb\n","import { Button, List, Typography } from \"antd\";\nconst { Text } = Typography;\n\nconst JobApplicantsList = ({ data }) => {\n  return (\n    <List\n      pagination={{ position: \"bottom\", align: \"center\", pageSize: 5 }}\n      dataSource={data}\n      rowKey={(item) => item.id}\n      renderItem={(item) => (\n        <List.Item\n          actions={[\n            <Button\n              type=\"link\"\n              href={\"/employer/applicant/\" + item.id}\n              target={\"_blank\"}\n            >\n              View Profile\n            </Button>,\n          ]}\n        >\n          <List.Item.Meta\n            title={`${item.firstName} ${item.lastName}`}\n            description={<JobsDescription item={item} />}\n          />\n        </List.Item>\n      )}\n    />\n  );\n};\n\nconst JobsDescription = ({ item }) => {\n  const { skillset } = item;\n  return <Text type=\"secondary\">Skills: {`${skillset}`}</Text>;\n};\n\nexport default JobApplicantsList;\n","import { Modal } from \"antd\";\nimport JobApplicantsList from \"components/JobApplicantsList\";\n\nconst data = [\n  {\n    id: 103,\n    firstName: \"Alice\",\n    lastName: \"Smith\",\n    skillset: [\"JavaScript\", \"React\", \"Node.js\"],\n    githubUserName: \"aliceSmith\",\n  },\n  {\n    id: 104,\n    firstName: \"Bob\",\n    lastName: \"Johnson\",\n    skillset: [\"Python\", \"Django\", \"Docker\"],\n    githubUserName: \"bobJohnson\",\n  },\n  {\n    id: 105,\n    firstName: \"Charlie\",\n    lastName: \"Brown\",\n    skillset: [\"Java\", \"Spring\", \"MySQL\"],\n    githubUserName: \"charlieBrown\",\n  },\n  {\n    id: 106,\n    firstName: \"Diana\",\n    lastName: \"Miller\",\n    skillset: [\"HTML\", \"CSS\", \"JavaScript\"],\n    githubUserName: \"dianaMiller\",\n  },\n  {\n    id: 107,\n    firstName: \"Ethan\",\n    lastName: \"Davis\",\n    skillset: [\"React\", \"Redux\", \"TypeScript\"],\n    githubUserName: \"ethanDavis\",\n  },\n  {\n    id: 108,\n    firstName: \"Fiona\",\n    lastName: \"Garcia\",\n    skillset: [\"Node.js\", \"Express\", \"MongoDB\"],\n    githubUserName: \"fionaGarcia\",\n  },\n  {\n    id: 109,\n    firstName: \"George\",\n    lastName: \"Wilson\",\n    skillset: [\"Ruby\", \"Rails\", \"PostgreSQL\"],\n    githubUserName: \"georgeWilson\",\n  },\n  {\n    id: 110,\n    firstName: \"Hannah\",\n    lastName: \"Taylor\",\n    skillset: [\"PHP\", \"Laravel\", \"MySQL\"],\n    githubUserName: \"hannahTaylor\",\n  },\n  {\n    id: 111,\n    firstName: \"Ian\",\n    lastName: \"Martinez\",\n    skillset: [\"C#\", \".NET\", \"Azure\"],\n    githubUserName: \"ianMartinez\",\n  },\n  {\n    id: 112,\n    firstName: \"Julia\",\n    lastName: \"Clark\",\n    skillset: [\"Python\", \"Flask\", \"SQLAlchemy\"],\n    githubUserName: \"juliaClark\",\n  },\n];\n\nconst ViewJobApplicantsModal = ({\n  modalOpen,\n  handleJobApplicantModalClose,\n  applicantsData = data,\n}) => {\n  return (\n    <Modal\n      title=\"View Applicants\"\n      open={modalOpen}\n      footer={null}\n      onCancel={handleJobApplicantModalClose}\n      width={600}\n    >\n      <JobApplicantsList data={applicantsData} />\n    </Modal>\n  );\n};\n\nexport default ViewJobApplicantsModal;\n","import React, { useState, useEffect } from \"react\";\nimport { Layout, Spin } from \"antd\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport JobsList from \"components/JobsList/JobsList\";\nimport PostJobForm from \"components/PostJobForm\";\nimport { USER_TYPES } from \"constants\";\nimport SideNavbar from \"components/SideNavbar\";\nimport HeaderComponent from \"components/HeaderComponent\";\nimport { useNavigate } from \"react-router-dom\";\nimport { logoutUser } from \"state/slices/authSlice\";\nimport {\n  fetchApplicantList,\n  fetchEmployerJobs,\n} from \"state/slices/employerSlice\";\nimport ViewJobApplicantsModal from \"components/ViewJobApplicantsModal\";\nconst { Content, Sider } = Layout;\n\nconst siderStyle = {\n  overflow: \"auto\",\n  height: \"100vh\",\n  position: \"fixed\",\n  insetInlineStart: 0,\n  top: 0,\n  bottom: 0,\n  scrollbarWidth: \"thin\",\n  scrollbarColor: \"unset\",\n};\n\nconst EmployerPage = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  // const [isLoading, setIsLoading] = useState(false);\n  const [modalOpen, setModalOpen] = useState(false);\n  const { jobsList, isLoading } = useSelector((state) => state.employer);\n  const [currentNavKey, setcurrentNavKey] = useState(\"jobs\");\n\n  const handleJobApplicantModalOpen = (id) => {\n    setModalOpen(true);\n  };\n\n  const handleJobApplicantModalClose = () => {\n    setModalOpen(false);\n  };\n\n  const logOut = () => {\n    dispatch(logoutUser());\n    navigate(\"/\");\n  };\n\n  const handleNavbarClick = (e) => {\n    setcurrentNavKey(e.key);\n  };\n\n  useEffect(() => {\n    dispatch(fetchEmployerJobs());\n    dispatch(fetchApplicantList());\n  }, []);\n\n  return (\n    <Spin spinning={isLoading}>\n      <Layout hasSider>\n        <Sider style={siderStyle}>\n          <SideNavbar\n            onClick={handleNavbarClick}\n            currentNavKey={currentNavKey}\n            userType={USER_TYPES.employer}\n          />\n        </Sider>\n        <Layout\n          style={{\n            marginInlineStart: 200,\n            height: \"100vh\",\n          }}\n        >\n          <HeaderComponent title={USER_TYPES.employer} onButtonClick={logOut} />\n          <Content\n            style={{\n              margin: \"20px 16px 0\",\n              overflow: \"initial\",\n            }}\n          >\n            {currentNavKey === \"jobs\" && (\n              <JobsList\n                data={jobsList}\n                userType={USER_TYPES.employer}\n                onButtonClick={handleJobApplicantModalOpen}\n              />\n            )}\n            {currentNavKey === \"post-job\" && <PostJobForm />}\n          </Content>\n        </Layout>\n      </Layout>\n      <ViewJobApplicantsModal\n        modalOpen={modalOpen}\n        handleJobApplicantModalClose={handleJobApplicantModalClose}\n      />\n    </Spin>\n  );\n};\n\nexport default EmployerPage;\n"],"names":["Header","Layout","Text","Typography","_ref","title","onButtonClick","token","colorBgContainer","theme","useToken","_jsx","style","padding","background","children","_jsxs","Row","align","Col","span","strong","fontSize","marginLeft","offset","Button","type","onClick","JobsDescription","_ref2","item","companyName","skillset","minSalaryPerHour","data","userType","Card","List","pagination","position","pageSize","dataSource","rowKey","id","renderItem","Item","actions","USER_TYPES","Meta","role","description","freelancerMenuItems","key","icon","UserOutlined","label","BarChartOutlined","employerMenuItems","menuItems","freelancer","employer","currentNavKey","_Fragment","Flex","justify","level","color","margin","fontWeight","Menu","mode","defaultSelectedKeys","items","marginTop","SKILLSET","value","TextArea","Input","fileUploadProps","name","accept","headers","authorization","beforeUpload","file","meetsFileSize","size","message","error","Upload","LIST_IGNORE","customRequest","onSuccess","onError","setTimeout","Error","maxCount","onChange","info","status","success","normFile","e","Array","isArray","fileList","PostJobForm","dispatch","useDispatch","form","Form","useForm","labelCol","wrapperCol","labelAlign","onFinish","values","jobDetails","Math","floor","random","jobTitle","jobTags","salaryPerHour","timeStamp","Date","now","resetFields","addNewJob","onFinishFailed","errorInfo","console","log","rules","required","InputNumber","valuePropName","getValueFromEvent","UploadOutlined","Select","width","placeholder","handleChange","options","htmlType","href","target","firstName","lastName","githubUserName","modalOpen","handleJobApplicantModalClose","applicantsData","Modal","open","footer","onCancel","JobApplicantsList","Content","Sider","siderStyle","overflow","height","insetInlineStart","top","bottom","scrollbarWidth","scrollbarColor","EmployerPage","navigate","useNavigate","setModalOpen","useState","jobsList","isLoading","useSelector","state","setcurrentNavKey","useEffect","fetchEmployerJobs","fetchApplicantList","Spin","spinning","hasSider","SideNavbar","marginInlineStart","HeaderComponent","logOut","logoutUser","JobsList","ViewJobApplicantsModal"],"sourceRoot":""}